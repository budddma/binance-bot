from aiogram import Dispatcher, types
from market_data import MarketData, BinanceException
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database import get_usernames, insert_into_table, get_user_data

AVAILABLE_TIMEFRAMES = ("1 –º–∏–Ω—É—Ç–∞", "1 —á–∞—Å", "1 –¥–µ–Ω—å", "1 –Ω–µ–¥–µ–ª—è", "1 –º–µ—Å—è—Ü")
AVAILABLE_INDICATORS = (
    "SMA",
    "EMA",
    "RSI",
    "SO",
    "MACD",
    "WMA",
    "KST",
    "KAMA",
    "PPO",
    "ROC",
    "AD",
    "CMF",
    "CFO",
    "ATR",
    "BB",
)


class DialogStates(StatesGroup):
    choose_data = State()
    process_pair = State()
    process_timeframe = State()
    process_indicators = State()


async def process_start(message: types.Message, state: FSMContext):
    await state.reset_state()
    MarketData.input_indicators = []
    start_message = """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —É–≤–∞–∂–∞–µ–º—ã–π! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç –≤–∞–º –≥—Ä–∞—Ñ–∏–∫ —Å–≤–µ—á–µ–π –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã. –ó–∞–ø—Ä–æ—Å—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –∫–æ–º–∞–Ω–¥–æ–π /new_chart
    """
    await message.answer(
        start_message,
        reply_markup=types.ReplyKeyboardRemove(),
    )


async def process_new_chart(message: types.Message, state: FSMContext):
    await state.reset_state()
    MarketData.input_indicators = []
    await state.set_state(DialogStates.process_pair.state)
    await check_user(message, state)


async def check_user(message: types.Message, state: FSMContext):
    username = message.from_user.username
    async with state.proxy() as data:
        data["username"] = username

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ["–ú–û–ñ–ï–ú –ü–û–í–¢–û–†–ò–¢–¨", "–í–≤–µ–¥—É –∑–∞–Ω–æ–≤–æ"]
    keyboard.add(*buttons)

    if username in get_usernames():
        user_data = get_user_data(message.from_user.username)
        await message.answer(
            f"–î–∞–≤–Ω–æ —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –≤ —É–ª–∏—á–Ω—ã—Ö –≥–æ–Ω–∫–∞—Ö, {username}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?\n"
            f"–ü–∞—Ä–∞: {user_data[0]}\n"
            f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {user_data[1]}\n"
            f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {user_data[2]}",
            reply_markup=keyboard,
        )
        await state.set_state(DialogStates.choose_data.state)

    else:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \nBTCUSDT",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.set_state(DialogStates.process_pair.state)


async def choose_data(message: types.Message, state: FSMContext):
    if message.text.upper().strip() == "–ú–û–ñ–ï–ú –ü–û–í–¢–û–†–ò–¢–¨":
        await plot_charts(message, state)

    else:
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \nBTCUSDT",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.set_state(DialogStates.process_pair.state)


async def plot_charts(message: types.Message, state: FSMContext):
    time_dict = {
        "1 –º–∏–Ω—É—Ç–∞": "1m",
        "1 —á–∞—Å": "1h",
        "1 –¥–µ–Ω—å": "1d",
        "1 –Ω–µ–¥–µ–ª—è": "1w",
        "1 –º–µ—Å—è—Ü": "1M",
    }

    args = get_user_data(message.from_user.username)

    try:
        MarketData.init_candle_df(args[0], time_dict[args[1]])
    except BinanceException as e:
        print(f"üö® –ó–∞–ø—Ä–æ—Å –∫ Binance API –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π {e.status_code}")

    if args[2]:
        MarketData.input_indicators = args[2].split(", ")
        MarketData.init_indicators_df()

        for chart in MarketData.get_charts_list():
            await message.answer_photo(chart.to_image(format="png"))

    else:
        await message.answer_photo(
            MarketData.get_only_candlestick().to_image(format="png")
        )

    MarketData.input_indicators = []
    await state.reset_state()


async def process_pair(message: types.Message, state: FSMContext):
    input_pair = message.text.upper().strip()
    possible_pairs = []
    try:
        possible_pairs = MarketData.get_possible_pairs()
    except BinanceException as e:
        print(f"üö® –ó–∞–ø—Ä–æ—Å –∫ Binance API –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π {e.status_code}")

    if input_pair not in possible_pairs:
        await message.reply("–¢–∞–∫–æ–π –ø–∞—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    async with state.proxy() as data:
        data["pair"] = input_pair

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    row = []
    for button in AVAILABLE_TIMEFRAMES:
        row.append(button)

        if len(row) == 2:
            keyboard.add(*row)
            row.clear()

    if row:
        keyboard.add(*row)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º (–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–¥–Ω–æ–π —Å–≤–µ—á–∏):", reply_markup=keyboard
    )
    await state.set_state(DialogStates.process_timeframe.state)


async def process_timeframe(message: types.Message, state: FSMContext):
    input_timeframe = message.text.lower().strip()

    if input_timeframe not in AVAILABLE_TIMEFRAMES:
        await message.reply("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–æ—Ö–æ–≤?")
        return

    async with state.proxy() as data:
        data["timeframe"] = input_timeframe

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–Ø –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–±–∏—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")

    row = []
    for button in AVAILABLE_INDICATORS:
        row.append(button)

        if len(row) == 3:
            keyboard.add(*row)
            row.clear()

    if row:
        keyboard.add(*row)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:", reply_markup=keyboard)
    await state.set_state(DialogStates.process_indicators.state)


async def process_indicators(message: types.Message, state: FSMContext):
    input_indicator = message.text.upper().strip()

    if not input_indicator.startswith("–Ø –ó–ê–ö–û–ù–ß–ò–õ"):
        if input_indicator not in AVAILABLE_INDICATORS:
            await message.reply("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–æ—Ö–æ–≤?")
            return

        if input_indicator in MarketData.input_indicators:
            await message.reply("–ü–æ–≤—Ç–æ—Ä—è–µ—à—å—Å—è")
            return

        MarketData.input_indicators.append(input_indicator)
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {input_indicator}")

    if (
        input_indicator.startswith("–Ø –ó–ê–ö–û–ù–ß–ò–õ")
        or len(MarketData.input_indicators) == 5
    ):
        str_indicators = ", ".join(MarketData.input_indicators)

        async with state.proxy() as data:
            data["indicators"] = str_indicators

        ans = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {str_indicators}"
            if str_indicators
            else "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"
        )

        await message.answer(ans, reply_markup=types.ReplyKeyboardRemove())

        await insert_into_table(state)
        await plot_charts(message, state)


async def send_goida(message: types.Message):
    sticker_id = (
        "CAACAgIAAxkBAAEI7N9kWpMHrwxSnoCv97Wj7Xr8N04EoQACJRMAAkKvaQABFKxDSf9OkD8vBA"
    )
    await message.reply_sticker(sticker=sticker_id)


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(process_start, commands="start", state="*")
    dp.register_message_handler(process_new_chart, commands="new_chart", state="*")
    dp.register_message_handler(choose_data, state=DialogStates.choose_data)
    dp.register_message_handler(process_pair, state=DialogStates.process_pair)
    dp.register_message_handler(process_timeframe, state=DialogStates.process_timeframe)
    dp.register_message_handler(
        process_indicators, state=DialogStates.process_indicators
    )
    dp.register_message_handler(send_goida, commands="goida")
